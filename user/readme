1.hateoas基础整合然后cros的实现)
http://docs.spring.io/spring-hateoas/docs/0.20.0.RELEASE/reference/html/
[不加入静态页面部分，所有的静态页面都独立实现，仅使用api调用方式处理] done!!!
2.cros实现 done
3.oauth2
4.db 完成， test and prod done !!!
5.结合部分前端，走通
6.放入实体服务器
7.区分其他应用对user模块（oauth2）的使用（调用）

1. oauth2 user 部分实现 client 并实现静态，并使用js登陆，并在，并将user client设为管理平台的样式，并内置一个super user，登陆后，给出一个super_admin_client的概念，和一个super_admin的概念
2. user client,既有普通用户又有超级用户
3.开始进行数据库的对接部分的实现，并使用client进行验证，都走通之后再进行通用的操作

数据库部分设计完成【缺少组织结构之类的，还有就是二级授权，比如功能性的添加新闻，修改内容等】，
开始考虑用户，client的各项功能实现【增删改查，以及根据user role对应的列表以及点击进入后的处理，所以还需要添加其他的对应操作，是否需要一个tree对应左侧的操作目录，对应的是user的level，】，
等到进一步组织结构时，再考虑组织结构的数据结构，
等到cms或者crm部分再考虑授权之类的，这个放置在各个功能模块处，不要放在总体的用户管理模块处

子模块表【id client_id,name,order,related_in_tree(是否在功能树中)，related_url,available,parent，children】
模块结构样例
新闻管理：
 --新闻列表 --【新增新闻，修改新闻，删除新闻】
 --新增新闻

子模块&role表[role_id,module_id]

然后根据角色以及超级角色来处理这些事情，首先有一个获取树【tree】的操作
然后有一个根据tree来执行相关操作的事情


用户管理部分有一个【先做权限管理部分，然后客户端部分，然后用户管理，然后模块管理】
用户管理
--用户列表 --【新增用户，修改用户，删除用户，查看用户详细--【修改详细，删除用户】，过滤用户，根据用户名】
--新增用户
--修改个人信息
权限管理
--权限列表 --【新增权限，修改权限，删除权限，查看关联用户】
--新增权限
客户端管理
--客户端列表 --【新增客户端，修改客户端，删除客户端，查看下属模块，查看关联用户,而不是和角色关联，因为子admin对应的不同客户端】
--新增客户端
模块管理
--模块列表 --【新增模块，修改模块，删除模块，管理模块权限，模块和子role关联这个role我们新建一个表如何，还是使用以前的role表，使用子role表】
--新增模块

还有各个之间的关系处理--后续继续处理

1 tree table【权限表】  对应 module【子module，比如cms中的新闻module】 的操作，module_id 对应user role 以及sub role【每一个模块的role，比如cms，crm】,另外还有管理级别，0 是所有，1是自有



1.开始role的controller
2.注意使用hateoas，并注意根据module来进行区分0，1，更新，删除等，这个是子部分的，0,1部分的admin，还使用level来进行处理

首先将module以及role进行数据的初始化，然后获取左侧的树，然后初始化左侧的树，
然后进行role table的初步操作和测试完善，tomorrow do it

用户管理
 --用户列表 【新增用户，查看用户详细，修改用户，删除用户】
 --新增用户
 --修改个人信息

做至ModuleResourceController部分，接下来继续 //接下来做resource的转换工作
完事了之后
然后leftmenu-->需要进行获取并格式化

now doing！！！！！！
1.给左侧模块tree一个redis缓存
目前遇到序列化的问题
https://gist.github.com/thomasdarimont/9a252f4d8d6914d8d559
http://projects.spring.io/spring-data-redis/
考虑这两个！！ done
另外考虑redisreposity[这个暂时不考虑]

2. 开始user接口的处理
1.是否考虑使用客户端的数据格式
2.坚定的表示，是，但是去除value部分
3.那就需要在client内部处理完成数据结构，以及表结构【因为涉及权限，所以目的是给予其他操作的可行性】
4.开始着手实施，客户端侧需要完善，统一将redux封装一下，并将action和数据结构进行更改【不使用value对应，多选使用[]，而不是，】
5.先做客户端【table，chart】，数据结构完善，再做客户端后台


2.等user接口完事后，开始客户端对接，然后考虑分页的实现，然后是其他模块，另外就是 in 对应manytomany的过程中的实现验证，如果不合适，则需要重新处理







