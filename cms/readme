 theme [name  description ]
2 resource [name type fileType size url filename]

3 template [theme_id name desc ]
template_module_tag [id1 id2 position]
-- module_tag [name account desc]
-- custom_module_tag [name account desc template_id position]
4 website  --  [website_name url title email phone resource_location  resource_prefix_url related_users,enabled theme_id]
website_resource [id1 id2 order]
website_module_tag [id1 id2 template_id]
默认的page使用的模板
默认的news使用的模板
默认的event使用的模板
website_custom_module_tag [id1 id2 template_id aviable content(内容或者关联的module_id),script]
5 articles [title subtitle publish_date alias_url content,script template_id ,is_published,created_date, create_user]
article_module_tag [id1 id2 template_id aviable]
article_custom_module_tag [id1 id2 template_id aviable content(内容或者关联的module_id),script]

使用article来做总的关联
不再使用news和event，而是使用tag来整合
明天来实现media以及media_lib,也可以自定义一些block，最好是使用textarea（html+block——tag的方式【比如hotnews等】，这样将block整合在一起，不存在customblock或者通用block的区别）
然后开始实现部分功能theme--->resource--->[template-->block|customblock|preview]-->
media_lib [name account websiteId type[doc file image video audio] ]
11 media [name type fileType size url filename lib_id]
12 navigate [title parent before order type id websiteid]
13 cms_config [resource_location, resource_prefix_url,media_location,media_prefix_url,使用配置文件也可,决定使用配置文件]

contact_form 和poll后续考虑


基本模块完事
开始进行service和controller的实现

优化的过程是仅仅是article加了一个type，

需要一个theme&websitetree 用于进行起始的过滤

正在执行controller的处理，整个完成后再进行前端的处理

后端基本完成，开始执行前端的处理

所以不存在template的区分问题，到article的时候就是纯粹的block的处理了，关联到一个template作为基础，然后就是自定义的blocks的处理
理清了思路，现在开始执行文章的模块的处理了
template 应该有个复制处理，然后就是article里面的block只能新增未选中的，或者修改和自己关联的

剩余article和template的预览操作
开始考虑ckeditor的延展
以后需要考虑的是，内置css的ckeditor， ckeditor上传图片和选择图片【website的图片库】，ckeditor使用block tag，个性化设置！！！！！！
注意权限的问题【BeforeControllerAdvice】，当对其他资源或者根本的website以及theme进行处理时，除了判断该用户有没有module的权限，还要判断这个用户有没有对资源的处理权限，
module通过前端的tree、进行遮盖，但是根本的处理还是需要进行后端的BeforeControllerAdvice控制